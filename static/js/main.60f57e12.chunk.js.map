{"version":3,"sources":["redux/PokeList/selectors.js","redux/PokeDetail/selectors.js","redux/PokeTypes/selectors.js","api/PokeAPI.js","redux/PokeTypes/actionTypes.js","redux/PokeTypes/actions.js","redux/PokeTypes/operations.js","components/TypesFilter/TypesFilter.js","components/Header/Header.js","utils/utils.js","components/Pokedex/PokeTypes/PokeTypes.js","components/Pokedex/PokeCard/PokeCard.js","components/Pokedex/PokeList/PokeList.js","components/TableData/TableData.js","components/Pokedex/PokeDetail/PokeDetail.js","redux/PokeList/actions.js","redux/PokeList/actionTypes.js","redux/PokeList/operations.js","redux/PokeDetail/actions.js","redux/PokeDetail/actionTypes.js","redux/PokeDetail/operations.js","components/Pokedex/Pokedex.js","hooks/useFilteredPokemons.js","App.js","serviceWorker.js","redux/PokeList/reducer.js","redux/PokeDetail/reducer.js","redux/PokeTypes/reducer.js","store/store.js","theme/theme.js","index.js","assets/logo/logo.svg"],"names":["state","pokeList","pokemons","loading","error","nextUrl","pokeDetail","pokemon","pokeTypes","types","selectedType","instance","axios","baseURL","PokeAPI","getPokemonsList","offset","limit","a","get","response","status","data","console","Error","message","getPokemonByName","name","getPokemonTypes","REQUEST","SUCCESS","FAILURE","success","type","payload","setSelectedType","TypesFilter","dispatch","useDispatch","typesList","useSelector","pokeTypesSelectors","React","useState","anchorEl","setAnchorEl","closeMenu","handleClickItem","useEffect","results","length","log","Fragment","Button","aria-controls","variant","color","aria-haspopup","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","disabled","selected","map","key","mapState","listLoading","pokeListSelectors","detailLoading","pokeDetailSelectors","Header","AppBar","className","position","Container","maxWidth","Toolbar","disableGutters","Box","display","flexGrow","alignItems","mr","Link","href","width","height","src","Logo","alt","Typography","ml","capitalizeFirstLetter","string","charAt","toUpperCase","slice","PokeTypes","CardActions","item","Chip","label","PokeCard","fetchPokemon","Grow","in","Card","CardActionArea","CardMedia","component","image","sprites","front_default","title","onError","e","target","Placeholder","CardContent","gutterBottom","PokeList","props","Grid","xs","TableData","rows","TableContainer","Paper","Table","aria-label","TableBody","row","TableRow","TableCell","scope","align","value","createData","PokeDetail","id_string","pokemon_id","substring","tableRows","Object","values","stats","stat","base_stat","push","weight","moves","listError","detailError","Pokedex","fetchPokemons","useCallback","Promise","all","next","filteredPokemons","pokemonType","setFilteredPokemons","filtered","filter","some","typeObj","useFilteredPokemons","mt","container","spacing","Alert","severity","fetchPokemonByName","justifyContent","size","offsetTop","offsetBottom","mb","minWidth","App","window","location","hostname","match","INITIAL_STATE","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","middlewares","applyMiddleware","thunk","store","createStore","theme","createMuiTheme","overrides","MuiCardMedia","img","objectFit","padding","ReactDOM","render","StrictMode","CssBaseline","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.60f57e12.chunk.js","sourcesContent":["const getList = (state) => state.pokeList && state.pokeList.pokemons;\nconst getLoading = (state) => state.pokeList && state.pokeList.loading;\nconst getError = (state) => state.pokeList && state.pokeList.error;\nconst getNextUrl = (state) => state.pokeList && state.pokeList.nextUrl;\n\nexport default { getList, getLoading, getError, getNextUrl };\n","const getPokemon = (state) => state.pokeDetail && state.pokeDetail.pokemon;\r\nconst getLoading = (state) => state.pokeDetail && state.pokeDetail.loading;\r\nconst getError = (state) => state.pokeDetail && state.pokeDetail.error;\r\n\r\nexport default { getPokemon, getLoading, getError };\r\n","const getTypes = (state) => state.pokeTypes && state.pokeTypes.types;\nconst getSelectedType = (state) => state.pokeTypes && state.pokeTypes.selectedType;\nconst getLoading = (state) => state.pokeTypes && state.pokeTypes.loading;\nconst getError = (state) => state.pokeTypes && state.pokeTypes.error;\n\nexport default { getTypes, getSelectedType, getLoading, getError };\n","import * as axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://pokeapi.co/api/v2/',\n});\n\nexport class PokeAPI {\n    static getPokemonsList = async (offset, limit) => {\n        try {\n            const response = await instance.get(`pokemon/?offset=${offset}&limit=${limit}/`);\n            if (response.status === 200) {\n                return response.data;\n            }\n        } catch (e) {\n            console.error('PokeAPI.getPokemonsList() error: ', e);\n            throw new Error(e.message);\n        }\n    };\n\n    static getPokemonByName = async (name) => {\n        try {\n            const response = await instance.get(`pokemon/${name}/`);\n            if (response.status === 200) {\n                return response.data;\n            }\n        } catch (e) {\n            console.error('PokeAPI.getPokemonByName() error: ', e);\n            throw new Error(e.message);\n        }\n    };\n\n    static getPokemonTypes = async () => {\n        try {\n            const response = await instance.get(`type/`);\n            if (response.status === 200) {\n                return response.data;\n            }\n        } catch (e) {\n            console.error('PokeAPI.getPokemonTypes() error: ', e);\n            throw new Error(e.message);\n        }\n    };\n}\n","export const REQUEST = 'POKE_TYPES/REQUEST';\nexport const SUCCESS = 'POKE_TYPES/SUCCESS';\nexport const FAILURE = 'POKE_TYPES/FAILURE';\nexport const SET_SELECTED_TYPE = 'POKE_TYPES/SET_SELECTED_TYPE';\n","import { REQUEST, SUCCESS, FAILURE, SET_SELECTED_TYPE } from './actionTypes';\n\nexport function request() {\n    return {\n        type: REQUEST,\n    };\n}\n\nexport function success(data) {\n    return {\n        type: SUCCESS,\n        payload: data,\n    };\n}\n\nexport function failure(error) {\n    return {\n        type: FAILURE,\n        payload: error,\n    };\n}\n\nexport function setSelectedType(type) {\n    return {\n        type: SET_SELECTED_TYPE,\n        payload: type,\n    };\n}\n","import { PokeAPI } from '../../api/PokeAPI';\nimport { request, success, failure } from './actions';\n\nexport const fetchPokemonTypes = () => async (dispatch) => {\n    dispatch(request());\n    try {\n        const data = await PokeAPI.getPokemonTypes();\n        if (data.results.length > 0) {\n            dispatch(success(data.results));\n        }\n    } catch (e) {\n        console.log('Error: ', e);\n        dispatch(failure(e.message));\n    }\n};\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport pokeTypesSelectors from '../../redux/PokeTypes/selectors';\nimport { fetchPokemonTypes } from '../../redux/PokeTypes/operations';\nimport { Button, Menu, MenuItem } from '@material-ui/core';\nimport { setSelectedType } from '../../redux/PokeTypes/actions';\n\nconst TypesFilter = () => {\n    const dispatch = useDispatch();\n    const typesList = useSelector((state) => pokeTypesSelectors.getTypes(state));\n    const selectedType = useSelector((state) => pokeTypesSelectors.getSelectedType(state));\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const openMenu = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const closeMenu = () => {\n        setAnchorEl(null);\n    };\n\n    const handleClickItem = (type) => {\n        closeMenu();\n        dispatch(setSelectedType(type));\n    };\n\n    useEffect(() => {\n        dispatch(fetchPokemonTypes());\n    }, []);\n\n    return (\n        <React.Fragment>\n            <Button\n                aria-controls=\"simple-menu\"\n                variant=\"contained\"\n                color=\"secondary\"\n                aria-haspopup=\"true\"\n                onClick={openMenu}\n            >\n                Filter\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={closeMenu}\n            >\n                <MenuItem\n                    disabled={selectedType === 'All'}\n                    selected={selectedType === 'All'}\n                    onClick={() => handleClickItem('All')}\n                >\n                    All\n                </MenuItem>\n                {typesList &&\n                    typesList.map((type) => (\n                        <MenuItem\n                            key={`key-types-${type.name}`}\n                            onClick={() => handleClickItem(type.name)}\n                            disabled={selectedType === type.name}\n                            selected={selectedType === type.name}\n                        >\n                            {type.name}\n                        </MenuItem>\n                    ))}\n            </Menu>\n        </React.Fragment>\n    );\n};\nexport default TypesFilter;\n","import React from 'react';\nimport { AppBar, Toolbar, Box, Container, Link, Typography } from '@material-ui/core';\nimport Logo from '../../assets/logo/logo.svg';\nimport LinearProgress from '@material-ui/core/LinearProgress/LinearProgress';\nimport { useSelector } from 'react-redux';\nimport pokeListSelectors from '../../redux/PokeList/selectors';\nimport pokeDetailSelectors from '../../redux/PokeDetail/selectors';\nimport TypesFilter from '../TypesFilter/TypesFilter';\nimport './Header.scss';\n\nconst mapState = (state) => ({\n    listLoading: pokeListSelectors.getLoading(state),\n    detailLoading: pokeDetailSelectors.getLoading(state),\n});\n\nconst Header = () => {\n    const { listLoading, detailLoading } = useSelector(mapState);\n\n    return (\n        <AppBar className=\"header\" position=\"sticky\">\n            {(listLoading || detailLoading) && (\n                <LinearProgress className=\"loader\" color=\"secondary\" />\n            )}\n            <Container maxWidth=\"lg\">\n                <Toolbar disableGutters>\n                    <Box display=\"flex\" flexGrow=\"1\" alignItems=\"center\">\n                        <Box mr={2}>\n                            <Link href=\"/pokedex/\">\n                                <img width=\"48\" height=\"48\" src={Logo} alt=\"Pokedex\" />\n                            </Link>\n                        </Box>\n                        <Typography variant=\"h6\">Pokedex</Typography>\n                        <Box ml=\"auto\">\n                            <TypesFilter />\n                        </Box>\n                    </Box>\n                </Toolbar>\n            </Container>\n        </AppBar>\n    );\n};\n\nexport default Header;\n","export const capitalizeFirstLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n};","import React from 'react';\nimport { CardActions, Chip } from '@material-ui/core';\nimport { capitalizeFirstLetter } from '../../../utils/utils';\nimport './PokeTypes.scss'\n\nconst PokeTypes = ({ types }) => {\n    return (\n        <CardActions className=\"poke-types\">\n            {types.map((item) => (\n                <Chip\n                    key={`item-type-${item.type.name}`}\n                    className={item.type.name}\n                    label={capitalizeFirstLetter(item.type.name)}\n                />\n            ))}\n        </CardActions>\n    );\n};\nexport default PokeTypes;\n","import React from 'react';\nimport { Card, CardActionArea, CardMedia, CardContent, Typography, Grow } from '@material-ui/core';\nimport Placeholder from '../../../assets/logo/logo.svg';\nimport { capitalizeFirstLetter } from '../../../utils/utils';\nimport PokeTypes from '../PokeTypes/PokeTypes';\n\nconst PokeCard = ({ pokemon, fetchPokemon }) => {\n    return (\n        <Grow in>\n            <Card className=\"poke-card\">\n                <CardActionArea\n                    onClick={() => {\n                        fetchPokemon(pokemon.name);\n                    }}\n                >\n                    <CardMedia\n                        component=\"img\"\n                        alt={pokemon.name}\n                        height=\"96\"\n                        image={pokemon.sprites.front_default}\n                        title={pokemon.name}\n                        onError={(e) => {\n                            e.target.src = Placeholder;\n                        }}\n                    />\n                    <CardContent>\n                        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n                            {capitalizeFirstLetter(pokemon.name)}\n                        </Typography>\n                    </CardContent>\n                </CardActionArea>\n                <PokeTypes types={pokemon.types} />\n            </Card>\n        </Grow>\n    );\n};\nexport default PokeCard;\n","import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport PokeCard from '../PokeCard/PokeCard';\n\nconst PokeList = ({ pokemons, ...props }) => {\n    return (\n        <React.Fragment>\n            {pokemons.map((pokemon) => (\n                <Grid key={`poke-card-${pokemon.name}`} item xs={4}>\n                    <PokeCard {...props} pokemon={pokemon} />\n                </Grid>\n            ))}\n        </React.Fragment>\n    );\n};\nexport default PokeList;\n","import React from 'react';\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableRow } from '@material-ui/core';\nimport { capitalizeFirstLetter } from '../../utils/utils';\n\nconst TableData = ({ rows }) => {\n    return (\n        <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n                <TableBody>\n                    {rows.map((row) => (\n                        <TableRow key={row.name}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {capitalizeFirstLetter(row.name)}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.value}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\nexport default TableData;\n","import React from 'react';\nimport { Card, CardMedia, CardContent, Typography } from '@material-ui/core';\nimport Placeholder from '../../../assets/logo/logo.svg';\nimport { capitalizeFirstLetter } from '../../../utils/utils';\nimport TableData from '../../TableData/TableData';\nimport PokeTypes from '../PokeTypes/PokeTypes';\n\nfunction createData(name, value) {\n    return { name, value };\n}\n\nconst PokeDetail = ({ pokemon }) => {\n    const id_string = '' + pokemon.id;\n    const filler = '000';\n    const pokemon_id = filler.substring(0, filler.length - id_string.length) + id_string;\n    const stats = Object.values(pokemon.stats);\n    const tableRows = stats.map((stat) => {\n        return createData(stat.stat.name, stat.base_stat);\n    });\n    tableRows.push(createData('Weight', pokemon.weight));\n    tableRows.push(createData('Total moves', pokemon.moves.length));\n    return (\n        <Card>\n            <CardMedia\n                component=\"img\"\n                alt={pokemon.name}\n                height=\"96\"\n                image={pokemon.sprites.front_default}\n                title={pokemon.name}\n                onError={(e) => {\n                    e.target.src = Placeholder;\n                }}\n            />\n            <CardContent>\n                <Typography gutterBottom variant=\"h4\" component=\"h2\">\n                    {capitalizeFirstLetter(pokemon.name)} #{pokemon_id}\n                </Typography>\n                <TableData rows={tableRows} />\n            </CardContent>\n            <PokeTypes types={pokemon.types} />\n        </Card>\n    );\n};\nexport default PokeDetail;\n","import { REQUEST, SUCCESS, FAILURE, SET_NEXT_URL } from './actionTypes';\n\nexport function request() {\n    return {\n        type: REQUEST,\n    };\n}\n\nexport function success(data) {\n    return {\n        type: SUCCESS,\n        payload: data,\n    };\n}\n\nexport function failure(error) {\n    return {\n        type: FAILURE,\n        payload: error,\n    };\n}\n\nexport function setNextUrl(url) {\n    return {\n        type: SET_NEXT_URL,\n        payload: url,\n    };\n}\n","export const REQUEST = 'POKE_LIST/REQUEST';\nexport const SUCCESS = 'POKE_LIST/SUCCESS';\nexport const FAILURE = 'POKE_LIST/FAILURE';\nexport const SET_NEXT_URL = 'POKE_LIST/SET_NEXT_URL';\n","import { PokeAPI } from '../../api/PokeAPI';\nimport { request, success, failure, setNextUrl } from './actions';\n\nexport const fetchPokemonsList = (offset, limit) => async (dispatch) => {\n    dispatch(request());\n    try {\n        const data = await PokeAPI.getPokemonsList(offset, limit);\n        if (data.results.length > 0) {\n            const pokemons = await Promise.all(\n                data.results.map((pokemon) => PokeAPI.getPokemonByName(pokemon.name))\n            );\n            dispatch(setNextUrl(data.next));\n            dispatch(success(pokemons));\n        }\n    } catch (e) {\n        console.log('Error: ', e);\n        dispatch(failure(e.message));\n    }\n};\n","import { REQUEST, SUCCESS, FAILURE } from './actionTypes';\n\nexport function request() {\n    return {\n        type: REQUEST,\n    };\n}\n\nexport function success(data) {\n    return {\n        type: SUCCESS,\n        payload: data,\n    };\n}\n\nexport function failure(error) {\n    return {\n        type: FAILURE,\n        payload: error,\n    };\n}\n","export const REQUEST = 'POKE_DETAIL/REQUEST';\nexport const SUCCESS = 'POKE_DETAIL/SUCCESS';\nexport const FAILURE = 'POKE_DETAIL/FAILURE';\n","import { PokeAPI } from '../../api/PokeAPI';\nimport { request, success, failure } from './actions';\n\nexport const fetchPokemonByName = (name) => async (dispatch) => {\n    dispatch(request());\n    try {\n        const data = await PokeAPI.getPokemonByName(name);\n        if (data) {\n            dispatch(success(data));\n        }\n    } catch (e) {\n        console.log('Error: ', e);\n        dispatch(failure(e.message));\n    }\n};\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Grid, Box, Container, Button, Grow } from '@material-ui/core';\nimport PokeList from './PokeList/PokeList';\nimport PokeDetail from './PokeDetail/PokeDetail';\nimport pokeListSelectors from '../../redux/PokeList/selectors';\nimport pokeDetailSelectors from '../../redux/PokeDetail/selectors';\nimport pokeTypesSelectors from '../../redux/PokeTypes/selectors';\nimport { fetchPokemonsList } from '../../redux/PokeList/operations';\nimport StickyBox from 'react-sticky-box/dist/esnext';\nimport { fetchPokemonByName } from '../../redux/PokeDetail/operations';\nimport Alert from '@material-ui/lab/Alert';\nimport { useFilteredPokemons } from '../../hooks/useFilteredPokemons';\nimport { setSelectedType } from '../../redux/PokeTypes/actions';\n\nconst mapState = (state) => ({\n    pokemons: pokeListSelectors.getList(state),\n    nextUrl: pokeListSelectors.getNextUrl(state),\n    listLoading: pokeListSelectors.getLoading(state),\n    listError: pokeListSelectors.getError(state),\n    pokemon: pokeDetailSelectors.getPokemon(state),\n    detailError: pokeDetailSelectors.getError(state),\n    selectedType: pokeTypesSelectors.getSelectedType(state),\n});\n\nconst Pokedex = () => {\n    const dispatch = useDispatch();\n    let {\n        pokemons,\n        nextUrl,\n        listLoading,\n        listError,\n        pokemon,\n        detailError,\n        selectedType,\n    } = useSelector(mapState);\n\n    const fetchPokemons = useCallback(() => {\n        dispatch(fetchPokemonsList(pokemons.length, 12));\n        dispatch(setSelectedType('All'));\n    }, [pokemons.length]);\n\n    const fetchPokemon = (name) => {\n        dispatch(fetchPokemonByName(name));\n    };\n\n    const filteredPokemons = useFilteredPokemons(selectedType);\n\n    useEffect(() => {\n        fetchPokemons();\n    }, []);\n\n    // TODO Инкапусулировать данные для списка покемонов и для детального просмотра\n    return (\n        <Box mt={5}>\n            <Container maxWidth=\"lg\">\n                <Grid container spacing={4}>\n                    <Grid item container xs={7} spacing={3}>\n                        {filteredPokemons.length === 0 && selectedType !== 'All' && (\n                            <Grid item xs={12}>\n                                <Alert severity=\"warning\">No pokemons by type {selectedType}</Alert>\n                            </Grid>\n                        )}\n                        {pokemons && (\n                            <PokeList\n                                pokemons={filteredPokemons.length > 0 ? filteredPokemons : pokemons}\n                                fetchPokemon={fetchPokemon}\n                            />\n                        )}\n                        {listError && (\n                            <Grid item xs={12}>\n                                <Alert severity=\"error\">{listError}</Alert>\n                            </Grid>\n                        )}\n                        {nextUrl && (\n                            <Grid item xs={12}>\n                                <Box mt={5} display=\"flex\" justifyContent=\"center\">\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        size=\"large\"\n                                        onClick={fetchPokemons}\n                                        disabled={listLoading}\n                                    >\n                                        Load More\n                                    </Button>\n                                </Box>\n                            </Grid>\n                        )}\n                    </Grid>\n                    <Grid item xs={4}>\n                        <StickyBox offsetTop={100} offsetBottom={20}>\n                            {pokemon && (\n                                <Grow in>\n                                    <Box mb={2} minWidth={0.75}>\n                                        <PokeDetail pokemon={pokemon} />\n                                    </Box>\n                                </Grow>\n                            )}\n                            {detailError && <Alert severity=\"error\">{detailError}</Alert>}\n                        </StickyBox>\n                    </Grid>\n                </Grid>\n            </Container>\n        </Box>\n    );\n};\n\nexport default Pokedex;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport pokeListSelectors from '../redux/PokeList/selectors';\n\nexport const useFilteredPokemons = (pokemonType) => {\n    const [filteredPokemons, setFilteredPokemons] = useState([]);\n    const pokemons = useSelector((state) => pokeListSelectors.getList(state));\n\n    useEffect(() => {\n        if (pokemonType !== 'All') {\n            const filtered = pokemons.filter((pokemon) => {\n                return pokemon.types.some((typeObj) => typeObj.type.name === pokemonType);\n            });\n            setFilteredPokemons([...filtered]);\n        }\n        return () => {\n            setFilteredPokemons([]);\n        };\n    }, [pokemonType]);\n\n    return filteredPokemons;\n};\n","import React from 'react';\nimport Header from './components/Header/Header';\nimport Pokedex from './components/Pokedex/Pokedex';\n\nconst App = () => (\n    <React.Fragment>\n        <Header />\n        <Pokedex />\n    </React.Fragment>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { REQUEST, SUCCESS, FAILURE, SET_NEXT_URL } from './actionTypes';\n\nconst INITIAL_STATE = {\n    pokemons: [],\n    loading: false,\n    error: null,\n    nextUrl: null,\n};\n\nexport default (state = INITIAL_STATE, { type, payload }) => {\n    switch (type) {\n        case REQUEST:\n            return {\n                ...state,\n                error: null,\n                loading: true,\n            };\n        case SUCCESS:\n            return {\n                ...state,\n                pokemons: [...state.pokemons, ...payload],\n                error: null,\n                loading: false,\n            };\n        case FAILURE:\n            return {\n                ...state,\n                error: payload,\n                loading: false,\n            };\n        case SET_NEXT_URL:\n            return {\n                ...state,\n                nextUrl: payload,\n            };\n        default:\n            return state;\n    }\n};\n","import { REQUEST, SUCCESS, FAILURE } from './actionTypes';\n\nconst INITIAL_STATE = {\n    pokemon: null,\n    loading: false,\n    error: null,\n};\n\nexport default (state = INITIAL_STATE, { type, payload }) => {\n    switch (type) {\n        case REQUEST:\n            return {\n                ...state,\n                pokemon: null,\n                error: null,\n                loading: true,\n            };\n        case SUCCESS:\n            return {\n                ...state,\n                pokemon: payload,\n                error: null,\n                loading: false,\n            };\n        case FAILURE:\n            return {\n                ...state,\n                error: payload,\n                loading: false,\n            };\n        default:\n            return state;\n    }\n};\n","import { REQUEST, SUCCESS, FAILURE, SET_SELECTED_TYPE } from './actionTypes';\n\nconst INITIAL_STATE = {\n    types: [],\n    loading: false,\n    error: null,\n    selectedType: 'All',\n};\n\nexport default (state = INITIAL_STATE, { type, payload }) => {\n    switch (type) {\n        case REQUEST:\n            return {\n                ...state,\n                error: null,\n                loading: true,\n            };\n        case SUCCESS:\n            return {\n                ...state,\n                types: [...state.types, ...payload],\n                error: null,\n                loading: false,\n            };\n        case FAILURE:\n            return {\n                ...state,\n                error: payload,\n                loading: false,\n            };\n        case SET_SELECTED_TYPE:\n            return {\n                ...state,\n                selectedType: payload,\n            };\n        default:\n            return state;\n    }\n};\n","import { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport pokeListReducer from '../redux/PokeList/reducer';\nimport pokeDetailReducer from '../redux/PokeDetail/reducer';\nimport pokeTypesReducer from '../redux/PokeTypes/reducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst reducers = combineReducers({\n    pokeList: pokeListReducer,\n    pokeDetail: pokeDetailReducer,\n    pokeTypes: pokeTypesReducer,\n});\n\nconst middlewares = applyMiddleware(thunk);\n\nconst store = createStore(reducers, composeEnhancers(middlewares));\n\nexport default store;\n","import { createMuiTheme } from '@material-ui/core';\n\nexport const theme = createMuiTheme({\n    overrides: {\n        MuiCardMedia: {\n            img: {\n                objectFit: 'contain',\n                padding: '8px',\n            },\n        },\n    },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport { ThemeProvider, CssBaseline } from '@material-ui/core';\nimport {theme} from \"./theme/theme\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <CssBaseline />\n            <ThemeProvider theme={theme}>\n                <App />\n            </ThemeProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.3726ed66.svg\";"],"sourceRoot":""}